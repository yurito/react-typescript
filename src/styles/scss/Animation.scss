@import "./Global.scss";

/* Gradient border animated */
.gradient-border-animated {
    --borderWidth: 3px;
    background: #1d1f20;
    position: relative;
    border-radius: var(--borderWidth);

    &:after {
        content: "";
        position: absolute;
        top: calc(-1 * var(--borderWidth));
        left: calc(-1 * var(--borderWidth));
        height: calc(100% + var(--borderWidth) * 2);
        width: calc(100% + var(--borderWidth) * 2);
        background: linear-gradient(60deg, #f79533, #f37055, #ef4e7b, #a166ab, #5073b8, #1098ad, #07b39b, #6fba82);
        border-radius: calc(2 * var(--borderWidth));
        z-index: -1;
        animation: animatedgradient 3s ease alternate infinite;
        background-size: 300% 300%;
    }
}

@keyframes animatedgradient {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}

// Mixin for drawing button with optional argument for width, padding, and time
@mixin btn-draw($color, $color-hov, $width: 1px, $padding: 0.5em, $time: 0.2s) {
    position: relative;

    display: inline-block;

    color: $color;
    border-bottom: $width solid $color;
    cursor: pointer;
    overflow: hidden;
    transition: color $time ease-in-out, background-color $time ease-in-out;

    &:after {
        content: "";
        position: absolute;
        right: 0;
        bottom: 0;

        height: 100%;
        width: $width;

        background: $color;
        transform: translateY(100%);
        transition: transform $time ease-in-out;
        transition-delay: $time * 3;
    }

    > span {
        position: relative;

        display: block;
        padding: $padding;
        color: inherit;

        &:before,
        &:after {
            content: "";
            position: absolute;
            left: 0;
            top: 0;

            background: $color;
            transition: transform $time ease-in-out;
        }

        &:before {
            height: $width;
            width: 100%;

            transform: translateX(100%);
            transition-delay: $time * 2;
        }

        &:after {
            height: 100%;
            width: $width;

            transform: translateY(-100%);
            transition-delay: $time;
        }
    }

    &:hover:after,
    &:hover > span:before,
    &:hover > span:after {
        transform: translate(0, 0);
    }

    &:hover:after {
        transition-delay: 0s;
    }

    &:hover > span:before {
        transition-delay: $time;
    }

    &:hover > span:after {
        transition-delay: $time * 2;
    }

    &:hover {
        color: $color-hov;
        font-weight: 700;
        background-color: $color;
        transition-delay: $time * 3;
    }
}

// Color variables

$color-grey: #e4e4e2;

@mixin light-theme {
    .btn-draw {
        font-size: 0.75rem;
        text-transform: uppercase;
        text-decoration: none;
        letter-spacing: 0.1em;

        @include btn-draw($burnt-orange, $dark-bg-color, 2px);
    }
}

@mixin dark-theme {
    .btn-draw {
        font-size: 0.75rem;
        text-transform: uppercase;
        text-decoration: none;
        letter-spacing: 0.1em;
        @include btn-draw($lava-color, $light-bg-color, 2px);
    }
}

@media (prefers-color-scheme: light) {
    .screen-containter {
        @include light-theme();
    }
}
@media (prefers-color-scheme: dark) {
    .screen-containter,
    .page-theme {
        @include dark-theme();
    }
}

@media (max-width: 991px) {
}
@media (max-width: 576px) {
}

@media (max-width: 767px) {
}
